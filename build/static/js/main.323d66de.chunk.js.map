{"version":3,"sources":["logo.svg","components/boardcell/index.js","components/Board.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BoardCell","handleClick","e","_this$props","_this","props","isOpen","id","isDiamond","onDiamondSelect","onCellSelect","_this$props2","this","react_default","a","createElement","className","role","onClick","children","React","Component","GameBoard","state","diamondSelections","selections","cellsArray","diamondsLocation","isGameOver","inProgress","currentCell","handleGameOver","score","setState","handleNewGame","restartGame","handleResumeGame","resumeGame","numberOfDiamonds","size","generateDiamondPositions","row","diamonds","max","length","randomNumber","Math","floor","random","indexOf","concat","push","handleSaveGame","cell","localStorage","setItem","btoa","JSON","stringify","progress","parse","atob","gameprogress","handleercellArray","limit","i","handleDiamondSelect","Object","toConsumableArray","handleSelectedCell","getRowAndColumnNumber","cellPos","getDiamondLocation","_this$state","cellNumber","parseInt","split","coordinates","arrowAngle","arrowDistance","hiddenDiamondsCoordinates","filter","diamond","map","diamondNumber","diamondCoordinates","abs","b","sqrt","pow","angle","distance","reduce","prev","curr","_this2","nearestDiamond","cellIndex","boardcell_BoardCell","key","style","transform","GameMenu","console","log","Board_GameBoard","App","components_GameMenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.323d66de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nexport default class BoardCell extends React.Component{\r\n handleClick=(e)=>{\r\n \tlet {isOpen,id,isDiamond}=this.props\r\n \tif(!isOpen){\r\n\t \tif(isDiamond){\r\n\t \t\tthis.props.onDiamondSelect(id)\r\n\t \t}\r\n \t\tthis.props.onCellSelect(id)\r\n \t}\r\n }\r\n render(){\r\n \tconst {isOpen,isDiamond}=this.props;\r\n  return(\r\n   <div className={isOpen?isDiamond?\"boradcell bordeCellDiamond\":\"boradcell bordeCellOpen\":\"boradcell bordeCellClose\t\"} role=\"button\" id={this.props.id}\r\n   onClick={this.handleClick}>\r\n   \t{this.props.children}\r\n   </div>\r\n  );\r\n }\r\n}","import React from 'react';\r\nimport BoardCell from './boardcell/index'\r\n\r\nexport default class GameBoard extends React.Component{\r\n\tstate = {\r\n      diamondSelections: [],\r\n      selections: [],\r\n      cellsArray:[],\r\n      diamondsLocation:[],\r\n      isGameOver:false,\r\n\t\tinProgress:false,\r\n\t\tcurrentCell:\"\"\r\n    }\r\n    handleGameOver=(score)=>{\r\n\t\tthis.setState({\r\n\t\t\tisGameOver:true,\r\n\t\t\tscore:score,\r\n\t\t})\r\n\t}\r\n\thandleNewGame=()=>{\r\n\t\tthis.restartGame()\r\n\t\tthis.setState({\r\n\t\t\tisGameOver:false,\r\n\t\t\tinProgress:false\r\n\t\t})\r\n\t}\r\n\thandleResumeGame=()=>{\r\n\t\tthis.resumeGame();\r\n\t\tthis.setState({\r\n\t\t\tinProgress:false\r\n\t\t})\r\n\t}\r\n    componentWillMount(){\r\n    \tconst {size,numberOfDiamonds}=this.props;\r\n    \tthis.setState({\r\n    \t\tcellsArray:this.handleercellArray(size),\r\n    \t\tdiamondsLocation:this.generateDiamondPositions(numberOfDiamonds),\r\n\t\t\tinProgress:true\r\n    \t});\r\n    \t\r\n    }\r\n    restartGame = () => {\r\n    const { size,numberOfDiamonds } = this.props;\r\n    this.setState({\r\n      diamondsLocation: this.generateDiamondPositions(numberOfDiamonds),\r\n      diamondSelections: [],\r\n      selections: [],\r\n      currentCell: \"\",\r\n    });\r\n  }\r\n\tgenerateDiamondPositions = (row) => {\r\n\t\tconst diamonds = [];\r\n\t\tconst min = 1;\r\n\t\tconst max = row * row;\r\n\t\twhile (diamonds.length < row) {\r\n\t\t  const randomNumber = Math.floor(Math.random() * ((max - min) + 1)) + min;\r\n\t\t  if (diamonds.indexOf(`cell-${randomNumber}`) === -1) {\r\n\t\t    diamonds.push(`cell-${randomNumber}`);\r\n\t\t  }\r\n\t\t}\r\n\t\treturn diamonds;\r\n\t}\r\n\thandleSaveGame=(cell)=>{\r\n\t\tlocalStorage.setItem('gameprogress', btoa(\r\n      JSON.stringify({\r\n        selections: this.state.selections,\r\n        diamondsLocation: this.state.diamondsLocation,\r\n        diamondSelections: this.state.diamondSelections,\r\n        currentCell: cell,\r\n      }),\r\n    ));\r\n\t}\r\n\tresumeGame = () => {\r\n    const progress = JSON.parse(atob(localStorage.gameprogress));\r\n    this.setState(progress);\r\n  \t}\r\n    handleercellArray=(size)=>{\r\n    \tconst limit = size*size;\r\n    \tconst cellsArray=[];\r\n    \tfor (var i = 0; i < limit; i++) {\r\n    \t\tcellsArray.push(i);\r\n    \t}\r\n    \treturn cellsArray\r\n    }\r\n\thandleDiamondSelect=(cell)=>{\r\n\t\tthis.setState({\r\n\t\t  diamondSelections: [...this.state.diamondSelections, cell],\r\n\t\t}, () => {\r\n\t      if (this.state.diamondSelections.length === this.props.numberOfDiamonds) {\r\n\t        this.handleGameOver(this.state.cellsArray.length - this.state.selections.length);\r\n\t      }\r\n    });\r\n\t}\r\n\r\n    handleSelectedCell=(cell)=>{\r\n    \tthis.setState({\r\n    \t\tselections:[...this.state.selections,cell],\r\n    \t\tcurrentCell:cell\r\n    \t},()=>{\r\n    \t\tthis.handleSaveGame(cell)\r\n    \t})\r\n\r\n    }\r\n    getRowAndColumnNumber=(cellPos,size)=>{\r\n    \tconst rowNumber = Math.floor(cellPos/size);\r\n    \tconst colNumber= cellPos%size;\r\n    \treturn[colNumber,rowNumber];\r\n    }\r\n    getDiamondLocation=()=>{\r\n    \tlet {currentCell, diamondsLocation }=this.state;\r\n    \tlet {size} = this.props;\r\n    \tlet cellNumber = parseInt(currentCell.split(\"-\")[1])\r\n    \tlet coordinates = this.getRowAndColumnNumber(cellNumber,size)\r\n    \t\r\n    \tlet arrowAngle=0;\r\n    \tlet arrowDistance=0;\r\n    \tlet hiddenDiamonds = diamondsLocation.filter((diamond)=>(this.state.diamondSelections.indexOf(diamond)===-1));\r\n    \tlet hiddenDiamondsCoordinates = hiddenDiamonds.map((diamond)=>{\r\n    \t\tlet diamondNumber =parseInt(diamond.split(\"-\")[1]);\r\n    \t\tlet diamondCoordinates = this.getRowAndColumnNumber(diamondNumber,size);\r\n    \t\tif(diamondCoordinates[0] === coordinates[0]){\r\n    \t\t\tif(diamondCoordinates[1] > coordinates[1]){\r\n    \t\t\t\t// arrowAngle=270;\r\n    \t\t\t\tarrowAngle=90;\r\n    \t\t\t}\r\n    \t\t\telse{\r\n    \t\t\t\t// arrowAngle=90;\r\n    \t\t\t\tarrowAngle=270;\r\n    \t\t\t}\r\n    \t\t\tarrowDistance = Math.abs(diamondCoordinates[1] - coordinates[1]);\r\n    \t\t}\r\n    \t\telse if(diamondCoordinates[1] === coordinates[1]){\r\n    \t\t\tif(diamondCoordinates[0] > coordinates[0]){\r\n    \t\t\t\t// arrowAngle=180;\r\n    \t\t\t\tarrowAngle=0;\r\n    \t\t\t}\r\n    \t\t\telse{\r\n    \t\t\t\tarrowAngle=180;\r\n    \t\t\t\t// arrowAngle=0;\r\n    \t\t\t}\r\n    \t\t\tarrowDistance = Math.abs(diamondCoordinates[0] - coordinates[0]);\r\n    \t\t}\r\n    \t\telse{\r\n    \t\t\tif (diamondCoordinates[1] < coordinates[1] && diamondCoordinates[0] < coordinates[0]) {\r\n\t\t          // arrowAngle = 45;\r\n\t\t          arrowAngle = 225;\r\n\t\t        } else if (diamondCoordinates[1] < coordinates[1] && diamondCoordinates[0] > coordinates[0]) {\r\n\t\t          // arrowAngle = 135;\r\n\t\t          arrowAngle = 315;\r\n\t\t        } else if (diamondCoordinates[1] > coordinates[1] && diamondCoordinates[0] > coordinates[0]) {\r\n\t\t          // arrowAngle = 225;\r\n\t\t          arrowAngle = 45;\r\n\t\t        } else if (diamondCoordinates[1] > coordinates[1] && diamondCoordinates[0] < coordinates[0]) {\r\n\t\t          // arrowAngle = 315;\r\n\t\t          arrowAngle = 135;\r\n\t\t        }\r\n\t\t        const a = diamondCoordinates[0] - coordinates[1];\r\n\t\t        const b = diamondCoordinates[1] - coordinates[1];\r\n\t\t        arrowDistance = Math.sqrt((a ** 2) + (b ** 2));\r\n    \t\t}\r\n    \t\treturn{\r\n    \t\t\tangle:arrowAngle,\r\n    \t\t\tdistance:arrowDistance\r\n    \t\t}\r\n    \t});\r\n\t\t return hiddenDiamondsCoordinates.length>0? hiddenDiamondsCoordinates.reduce((prev, curr) => (\r\n\t\t      prev.distance < curr.distance ? prev : curr\r\n\t\t    )):{};\r\n    }\r\n\r\n render(){\r\n \tconst {size}=this.props;\r\n \tlet nearestDiamond = this.getDiamondLocation();\r\n  return(\r\n  \t<div>\r\n    <div className=\"gameBoard gameContainer\">\r\n    {\r\n    \tthis.state.cellsArray.map((cell,cellIndex)=>{\r\n    \t\treturn <BoardCell key={cell} \r\n    \t\tid={`cell-${cell}`}\r\n    \t\tsize={size}\r\n    \t\tisOpen={this.state.selections.indexOf(`cell-${cell}`)>-1}\r\n    \t\tisDiamond={this.state.diamondsLocation.indexOf(`cell-${cell}`)>-1}\r\n    \t\tonCellSelect={this.handleSelectedCell}\r\n    \t\tonDiamondSelect={this.handleDiamondSelect}\r\n\r\n    \t\t>\r\n    \t\t{\r\n    \t\t\tthis.state.currentCell===`cell-${cell}`&& this.state.diamondSelections.indexOf(`cell-${cell}`)===-1 &&\r\n    \t\t\t<div className=\"bordeCellArrow\" style={{transform:`rotate(${nearestDiamond.angle}deg)`}}>\r\n    \t\t\t\t\r\n    \t\t\t</div>\r\n\r\n    \t\t}\r\n    \t\t</BoardCell>\r\n    \t})\r\n    }\r\n\r\n    </div>\r\n        {\r\n\t\tthis.state.isGameOver && <div className=\"gameResult\">\r\n\t\t<h3>{`Your Score: ${this.state.score}`}</h3>\r\n\t\t<button onClick={this.handleNewGame}>New Game</button>\r\n\t\t</div>\r\n\t}\r\n\t{\r\n\t\tthis.state.inProgress && <div className=\"gameResume\">\r\n\t\t\t<h3>Resume Game</h3>\r\n\t\t\t<button onClick={this.handleResumeGame}>Resume Game</button>\r\n\t\t\t<button onClick={this.handleNewGame}>New Game</button>\r\n\t\t</div>\r\n\t}\r\n    </div>\r\n  );\r\n }\r\n}","import React from 'react';\r\nimport Board from './Board';\r\nexport default class GameMenu extends React.Component{\r\n\tstate={\r\n\t\tisGameOver:false,\r\n\t\tinProgress:false\r\n\t}\r\n\tcomponentDidMount(){\r\n\r\n\t}\r\n\t\r\n\trender(){\r\n\t\t\t\tconsole.log(\"SDDSDSSDDSDS render\",this.state.inProgress)\r\n\t\treturn(\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<Board size={8} numberOfDiamonds={6} handleGameOver={this.handleGameOver}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/index'\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h3>Diamond header</h3>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}